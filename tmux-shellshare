#!/usr/bin/env python
from __future__ import print_function

import argparse
import base64
import errno
import json
import os
import platform
import random
import socket
import string
import subprocess
import sys
import time
import uuid
try:
    import httplib
except ImportError:
    import http.client as httplib
try:
    import thread
except ImportError:
    import _thread as thread
try:
    from urllib2 import quote as urllib_quote
except ImportError:
    from urllib.parse import quote as urllib_quote
try:
    from urlparse import urlparse
except ImportError:
    from urllib.parse import urlparse
try:
    input_func = raw_input
except NameError:
    input_func = input
if platform.system() == 'Windows':
    try:
        import urllib.request as url_req  # for Python 3
    except ImportError:
        import urllib as url_req  # for Python 2

class NotAuthorizedException(Exception):
    pass

class RequestTooLargeException(Exception):
    pass


def id_generator(size=18, chars=string.ascii_letters + string.digits):
    return ''.join(random.choice(chars) for x in range(size))

def terminal_content():
    p = subprocess.Popen(['tmux',
        'display', '-p', '#{pane_width}:#{pane_height}:#{cursor_x}:#{cursor_y}:', ';',
        'capturep', '-p', '-e'], stdout=subprocess.PIPE)
    o = p.communicate()[0]
    cols, rows, curs_x, curs_y, content = o.split(b':', maxsplit=4)
    content = content.rstrip()
    content = content.replace(b'\n', b'\r\n')
    content = b'\033[H\033[J' + content
    content += b'\033[%d;%dH' % (int(curs_y)+1, int(curs_x)+1)
    return {
        'size':   {'cols': int(cols), 'rows': int(rows)},
        #'cursor': {'x': curs_x, 'y': curs_y},
        'content': content
    }

def post(conn, url, message, term_size, room, password):
    is_successful = lambda status: status >= 200 and status < 300
    headers = {'Content-type': 'application/json',
               'Authorization': password}
    data = json.dumps({'message': message, 'size': term_size})
    try:
        conn.request('POST', '/%s' % room, data, headers)
        res = conn.getresponse()
        res.read()

        if res.status == 401:
            raise NotAuthorizedException()
        elif res.status == 413:
            raise RequestTooLargeException()
        else:
            return is_successful(res.status)
    except httplib.HTTPException:
        pass
    except socket.error as e:
        if e.errno != errno.ECONNREFUSED:
            raise e

def stream_tmux(url, room, password, interval):
    retries = 3
    old_content = b''
    try:
        conn = create_connection(url)
        success = True
        while success:
            time.sleep(interval)

            try:
                info = terminal_content()
                if old_content != info['content']:
                    old_content = info['content']
            except:
                continue

            urlencoded = urllib_quote(info['content']).encode()
            encoded_str = base64.b64encode(urlencoded).decode()
            for _ in range(retries):
                success = post(conn, url, encoded_str, info['size'], room, password)
                if success:
                    break
                else:
                    time.sleep(1)
                    conn = create_connection(url)
        error('There was an error connecting to the server.')
    except NotAuthorizedException:
        error('You\'re not authorized to share on %s/%s.' % (url, room))
    except RequestTooLargeException:
        error('You\'ve wrote too much too fast. Please, slow down.')


def create_connection(url):
    parsed_url = urlparse(url)
    host = parsed_url.netloc
    if parsed_url.scheme.lower() == 'https':
        return httplib.HTTPSConnection(host)
    else:
        return httplib.HTTPConnection(host)


def error(*args):
    print('\r\nERROR:', *args, file=sys.stderr)
    print('\rERROR: Exit shellshare and try again later.', file=sys.stderr)


def delete(url, room, password):
    headers = {'Authorization': password}
    try:
        conn = create_connection(url)
        conn.request('DELETE', '/%s' % room, {}, headers)
        res = conn.getresponse()
        res.read()
    except Exception:
        pass


def parse_args():
    description = 'Transmits the current shell to shellshare'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.1.0')
    parser.add_argument('-s', '--server', dest='server',
                        help=('shellshare instance URL'
                              ' (default: https://shellshare.net)'),
                        default='https://shellshare.net')
    parser.add_argument('-r', '--room', dest='room',
                        help='room to share into (default: random room)',
                        default=id_generator())
    parser.add_argument('-i', '--interval', dest='interval', type=float,
                        help='update interval (default: 1sec)', default=1)
    parser.add_argument('-p', '--password', dest='password',
                        help='room\'s broadcasting password (default: network card\'s MAC address)',
                        default=uuid.getnode())
    args = parser.parse_args()

    if not urlparse(args.server).scheme:
        args.server = 'http://' + args.server

    return args


args = parse_args()
room = 'r/%s' % args.room

print('Sharing terminal in %s/%s' % (args.server, room), flush=True)
stream_tmux(args.server, room, args.password, args.interval)
delete(args.server, room, args.password)
print('End of transmission.')

